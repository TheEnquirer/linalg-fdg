{"version":3,"file":"static/js/9461.ee51d73e.chunk.js","mappings":"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","sources":["../node_modules/@codemirror/stream-parser/dist/index.js"],"sourcesContent":["import { NodeType, NodeSet, Parser, NodeProp, Tree } from '@lezer/common';\nimport { tags, styleTags } from '@codemirror/highlight';\nimport { Language, defineLanguageFacet, indentService, syntaxTree, ParseContext, getIndentUnit, languageDataProp } from '@codemirror/language';\n\n// Counts the column offset in a string, taking tabs into account.\n// Used mostly to find indentation.\nfunction countCol(string, end, tabSize, startIndex = 0, startValue = 0) {\n    if (end == null) {\n        end = string.search(/[^\\s\\u00a0]/);\n        if (end == -1)\n            end = string.length;\n    }\n    let n = startValue;\n    for (let i = startIndex; i < end; i++) {\n        if (string.charCodeAt(i) == 9)\n            n += tabSize - (n % tabSize);\n        else\n            n++;\n    }\n    return n;\n}\n/**\nEncapsulates a single line of input. Given to stream syntax code,\nwhich uses it to tokenize the content.\n*/\nclass StringStream {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The line.\n    */\n    string, tabSize, \n    /**\n    The current indent unit size.\n    */\n    indentUnit) {\n        this.string = string;\n        this.tabSize = tabSize;\n        this.indentUnit = indentUnit;\n        /**\n        The current position on the line.\n        */\n        this.pos = 0;\n        /**\n        The start position of the current token.\n        */\n        this.start = 0;\n        this.lastColumnPos = 0;\n        this.lastColumnValue = 0;\n    }\n    /**\n    True if we are at the end of the line.\n    */\n    eol() { return this.pos >= this.string.length; }\n    /**\n    True if we are at the start of the line.\n    */\n    sol() { return this.pos == 0; }\n    /**\n    Get the next code unit after the current position, or undefined\n    if we're at the end of the line.\n    */\n    peek() { return this.string.charAt(this.pos) || undefined; }\n    /**\n    Read the next code unit and advance `this.pos`.\n    */\n    next() {\n        if (this.pos < this.string.length)\n            return this.string.charAt(this.pos++);\n    }\n    /**\n    Match the next character against the given string, regular\n    expression, or predicate. Consume and return it if it matches.\n    */\n    eat(match) {\n        let ch = this.string.charAt(this.pos);\n        let ok;\n        if (typeof match == \"string\")\n            ok = ch == match;\n        else\n            ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));\n        if (ok) {\n            ++this.pos;\n            return ch;\n        }\n    }\n    /**\n    Continue matching characters that match the given string,\n    regular expression, or predicate function. Return true if any\n    characters were consumed.\n    */\n    eatWhile(match) {\n        let start = this.pos;\n        while (this.eat(match)) { }\n        return this.pos > start;\n    }\n    /**\n    Consume whitespace ahead of `this.pos`. Return true if any was\n    found.\n    */\n    eatSpace() {\n        let start = this.pos;\n        while (/[\\s\\u00a0]/.test(this.string.charAt(this.pos)))\n            ++this.pos;\n        return this.pos > start;\n    }\n    /**\n    Move to the end of the line.\n    */\n    skipToEnd() { this.pos = this.string.length; }\n    /**\n    Move to directly before the given character, if found on the\n    current line.\n    */\n    skipTo(ch) {\n        let found = this.string.indexOf(ch, this.pos);\n        if (found > -1) {\n            this.pos = found;\n            return true;\n        }\n    }\n    /**\n    Move back `n` characters.\n    */\n    backUp(n) { this.pos -= n; }\n    /**\n    Get the column position at `this.pos`.\n    */\n    column() {\n        if (this.lastColumnPos < this.start) {\n            this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);\n            this.lastColumnPos = this.start;\n        }\n        return this.lastColumnValue;\n    }\n    /**\n    Get the indentation column of the current line.\n    */\n    indentation() {\n        return countCol(this.string, null, this.tabSize);\n    }\n    /**\n    Match the input against the given string or regular expression\n    (which should start with a `^`). Return true or the regexp match\n    if it matches.\n    \n    Unless `consume` is set to `false`, this will move `this.pos`\n    past the matched text.\n    \n    When matching a string `caseInsensitive` can be set to true to\n    make the match case-insensitive.\n    */\n    match(pattern, consume, caseInsensitive) {\n        if (typeof pattern == \"string\") {\n            let cased = (str) => caseInsensitive ? str.toLowerCase() : str;\n            let substr = this.string.substr(this.pos, pattern.length);\n            if (cased(substr) == cased(pattern)) {\n                if (consume !== false)\n                    this.pos += pattern.length;\n                return true;\n            }\n            else\n                return null;\n        }\n        else {\n            let match = this.string.slice(this.pos).match(pattern);\n            if (match && match.index > 0)\n                return null;\n            if (match && consume !== false)\n                this.pos += match[0].length;\n            return match;\n        }\n    }\n    /**\n    Get the current token.\n    */\n    current() { return this.string.slice(this.start, this.pos); }\n}\n\nfunction fullParser(spec) {\n    return {\n        token: spec.token,\n        blankLine: spec.blankLine || (() => { }),\n        startState: spec.startState || (() => true),\n        copyState: spec.copyState || defaultCopyState,\n        indent: spec.indent || (() => null),\n        languageData: spec.languageData || {},\n        tokenTable: spec.tokenTable || noTokens\n    };\n}\nfunction defaultCopyState(state) {\n    if (typeof state != \"object\")\n        return state;\n    let newState = {};\n    for (let prop in state) {\n        let val = state[prop];\n        newState[prop] = (val instanceof Array ? val.slice() : val);\n    }\n    return newState;\n}\n/**\nA [language](https://codemirror.net/6/docs/ref/#language.Language) class based on a streaming\nparser.\n*/\nclass StreamLanguage extends Language {\n    constructor(parser) {\n        let data = defineLanguageFacet(parser.languageData);\n        let p = fullParser(parser), self;\n        let impl = new class extends Parser {\n            createParse(input, fragments, ranges) {\n                return new Parse(self, input, fragments, ranges);\n            }\n        };\n        super(data, impl, docID(data), [indentService.of((cx, pos) => this.getIndent(cx, pos))]);\n        self = this;\n        this.streamParser = p;\n        this.stateAfter = new NodeProp({ perNode: true });\n        this.tokenTable = parser.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;\n    }\n    static define(spec) { return new StreamLanguage(spec); }\n    getIndent(cx, pos) {\n        let tree = syntaxTree(cx.state), at = tree.resolve(pos);\n        while (at && at.type != this.topNode)\n            at = at.parent;\n        if (!at)\n            return null;\n        let start = findState(this, tree, 0, at.from, pos), statePos, state;\n        if (start) {\n            state = start.state;\n            statePos = start.pos + 1;\n        }\n        else {\n            state = this.streamParser.startState(cx.unit);\n            statePos = 0;\n        }\n        if (pos - statePos > 10000 /* MaxIndentScanDist */)\n            return null;\n        while (statePos < pos) {\n            let line = cx.state.doc.lineAt(statePos), end = Math.min(pos, line.to);\n            if (line.length) {\n                let stream = new StringStream(line.text, cx.state.tabSize, cx.unit);\n                while (stream.pos < end - line.from)\n                    readToken(this.streamParser.token, stream, state);\n            }\n            else {\n                this.streamParser.blankLine(state, cx.unit);\n            }\n            if (end == pos)\n                break;\n            statePos = line.to + 1;\n        }\n        let { text } = cx.state.doc.lineAt(pos);\n        return this.streamParser.indent(state, /^\\s*(.*)/.exec(text)[1], cx);\n    }\n    get allowsNesting() { return false; }\n}\nfunction findState(lang, tree, off, startPos, before) {\n    let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);\n    if (state)\n        return { state: lang.streamParser.copyState(state), pos: off + tree.length };\n    for (let i = tree.children.length - 1; i >= 0; i--) {\n        let child = tree.children[i], pos = off + tree.positions[i];\n        let found = child instanceof Tree && pos < before && findState(lang, child, pos, startPos, before);\n        if (found)\n            return found;\n    }\n    return null;\n}\nfunction cutTree(lang, tree, from, to, inside) {\n    if (inside && from <= 0 && to >= tree.length)\n        return tree;\n    if (!inside && tree.type == lang.topNode)\n        inside = true;\n    for (let i = tree.children.length - 1; i >= 0; i--) {\n        let pos = tree.positions[i] + from, child = tree.children[i], inner;\n        if (pos < to && child instanceof Tree) {\n            if (!(inner = cutTree(lang, child, from - pos, to - pos, inside)))\n                break;\n            return !inside ? inner\n                : new Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);\n        }\n    }\n    return null;\n}\nfunction findStartInFragments(lang, fragments, startPos, editorState) {\n    for (let f of fragments) {\n        let from = f.from + (f.openStart ? 25 : 0), to = f.to - (f.openEnd ? 25 : 0);\n        let found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to), tree;\n        if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false)))\n            return { state: found.state, tree };\n    }\n    return { state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4), tree: Tree.empty };\n}\nclass Parse {\n    constructor(lang, input, fragments, ranges) {\n        this.lang = lang;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.stoppedAt = null;\n        this.chunks = [];\n        this.chunkPos = [];\n        this.chunk = [];\n        this.chunkReused = undefined;\n        this.rangeIndex = 0;\n        this.to = ranges[ranges.length - 1].to;\n        let context = ParseContext.get(), from = ranges[0].from;\n        let { state, tree } = findStartInFragments(lang, fragments, from, context === null || context === void 0 ? void 0 : context.state);\n        this.state = state;\n        this.parsedPos = this.chunkStart = from + tree.length;\n        if (tree.length) {\n            this.chunks.push(tree);\n            this.chunkPos.push(0);\n        }\n        if (context && this.parsedPos < context.viewport.from - 100000 /* MaxDistanceBeforeViewport */) {\n            this.state = this.lang.streamParser.startState(getIndentUnit(context.state));\n            context.skipUntilInView(this.parsedPos, context.viewport.from);\n            this.parsedPos = context.viewport.from;\n        }\n    }\n    advance() {\n        let context = ParseContext.get();\n        let parseEnd = this.stoppedAt == null ? this.to : this.stoppedAt;\n        let end = Math.min(parseEnd, this.chunkStart + 2048 /* ChunkSize */);\n        if (context)\n            end = Math.min(end, context.viewport.to);\n        while (this.parsedPos < end)\n            this.parseLine(context);\n        if (this.chunkStart < this.parsedPos)\n            this.finishChunk();\n        if (this.parsedPos >= parseEnd)\n            return this.finish();\n        if (context && this.parsedPos >= context.viewport.to) {\n            context.skipUntilInView(this.parsedPos, parseEnd);\n            return this.finish();\n        }\n        return null;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n    }\n    lineAfter(pos) {\n        let chunk = this.input.chunk(pos);\n        if (!this.input.lineChunks) {\n            let eol = chunk.indexOf(\"\\n\");\n            if (eol > -1)\n                chunk = chunk.slice(0, eol);\n        }\n        else if (chunk == \"\\n\") {\n            chunk = \"\";\n        }\n        return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);\n    }\n    nextLine() {\n        let from = this.parsedPos, line = this.lineAfter(from), end = from + line.length;\n        for (let index = this.rangeIndex;;) {\n            let rangeEnd = this.ranges[index].to;\n            if (rangeEnd >= end)\n                break;\n            line = line.slice(0, rangeEnd - (end - line.length));\n            index++;\n            if (index == this.ranges.length)\n                break;\n            let rangeStart = this.ranges[index].from;\n            let after = this.lineAfter(rangeStart);\n            line += after;\n            end = rangeStart + after.length;\n        }\n        return { line, end };\n    }\n    skipGapsTo(pos, offset, side) {\n        for (;;) {\n            let end = this.ranges[this.rangeIndex].to, offPos = pos + offset;\n            if (side > 0 ? end > offPos : end >= offPos)\n                break;\n            let start = this.ranges[++this.rangeIndex].from;\n            offset += start - end;\n        }\n        return offset;\n    }\n    emitToken(id, from, to, size, offset) {\n        if (this.ranges.length > 1) {\n            offset = this.skipGapsTo(from, offset, 1);\n            from += offset;\n            let len0 = this.chunk.length;\n            offset = this.skipGapsTo(to, offset, -1);\n            to += offset;\n            size += this.chunk.length - len0;\n        }\n        this.chunk.push(id, from, to, size);\n        return offset;\n    }\n    parseLine(context) {\n        let { line, end } = this.nextLine(), offset = 0, { streamParser } = this.lang;\n        let stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);\n        if (stream.eol()) {\n            streamParser.blankLine(this.state, stream.indentUnit);\n        }\n        else {\n            while (!stream.eol()) {\n                let token = readToken(streamParser.token, stream, this.state);\n                if (token)\n                    offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);\n                if (stream.start > 10000 /* MaxLineLength */)\n                    break;\n            }\n        }\n        this.parsedPos = end;\n        if (this.parsedPos < this.to)\n            this.parsedPos++;\n    }\n    finishChunk() {\n        let tree = Tree.build({\n            buffer: this.chunk,\n            start: this.chunkStart,\n            length: this.parsedPos - this.chunkStart,\n            nodeSet,\n            topID: 0,\n            maxBufferLength: 2048 /* ChunkSize */,\n            reused: this.chunkReused\n        });\n        tree = new Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);\n        this.chunks.push(tree);\n        this.chunkPos.push(this.chunkStart - this.ranges[0].from);\n        this.chunk = [];\n        this.chunkReused = undefined;\n        this.chunkStart = this.parsedPos;\n    }\n    finish() {\n        return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();\n    }\n}\nfunction readToken(token, stream, state) {\n    stream.start = stream.pos;\n    for (let i = 0; i < 10; i++) {\n        let result = token(stream, state);\n        if (stream.pos > stream.start)\n            return result;\n    }\n    throw new Error(\"Stream parser failed to advance stream.\");\n}\nconst noTokens = /*@__PURE__*/Object.create(null);\nconst typeArray = [NodeType.none];\nconst nodeSet = /*@__PURE__*/new NodeSet(typeArray);\nconst warned = [];\nconst defaultTable = /*@__PURE__*/Object.create(null);\nfor (let [legacyName, name] of [\n    [\"variable\", \"variableName\"],\n    [\"variable-2\", \"variableName.special\"],\n    [\"string-2\", \"string.special\"],\n    [\"def\", \"variableName.definition\"],\n    [\"tag\", \"typeName\"],\n    [\"attribute\", \"propertyName\"],\n    [\"type\", \"typeName\"],\n    [\"builtin\", \"variableName.standard\"],\n    [\"qualifier\", \"modifier\"],\n    [\"error\", \"invalid\"],\n    [\"header\", \"heading\"],\n    [\"property\", \"propertyName\"]\n])\n    defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);\nclass TokenTable {\n    constructor(extra) {\n        this.extra = extra;\n        this.table = Object.assign(Object.create(null), defaultTable);\n    }\n    resolve(tag) {\n        return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));\n    }\n}\nconst defaultTokenTable = /*@__PURE__*/new TokenTable(noTokens);\nfunction warnForPart(part, msg) {\n    if (warned.indexOf(part) > -1)\n        return;\n    warned.push(part);\n    console.warn(msg);\n}\nfunction createTokenType(extra, tagStr) {\n    let tag = null;\n    for (let part of tagStr.split(\".\")) {\n        let value = (extra[part] || tags[part]);\n        if (!value) {\n            warnForPart(part, `Unknown highlighting tag ${part}`);\n        }\n        else if (typeof value == \"function\") {\n            if (!tag)\n                warnForPart(part, `Modifier ${part} used at start of tag`);\n            else\n                tag = value(tag);\n        }\n        else {\n            if (tag)\n                warnForPart(part, `Tag ${part} used as modifier`);\n            else\n                tag = value;\n        }\n    }\n    if (!tag)\n        return 0;\n    let name = tagStr.replace(/ /g, \"_\"), type = NodeType.define({\n        id: typeArray.length,\n        name,\n        props: [styleTags({ [name]: tag })]\n    });\n    typeArray.push(type);\n    return type.id;\n}\nfunction docID(data) {\n    let type = NodeType.define({ id: typeArray.length, name: \"Document\", props: [languageDataProp.add(() => data)] });\n    typeArray.push(type);\n    return type;\n}\n\nexport { StreamLanguage, StringStream };\n"],"names":["countCol","string","end","tabSize","startIndex","startValue","search","length","n","i","charCodeAt","StringStream","indentUnit","this","pos","start","lastColumnPos","lastColumnValue","charAt","undefined","match","ch","RegExp","test","eat","found","indexOf","pattern","consume","caseInsensitive","cased","str","toLowerCase","substr","slice","index","defaultCopyState","state","newState","prop","val","Array","StreamLanguage","parser","self","spec","data","defineLanguageFacet","languageData","p","token","blankLine","startState","copyState","indent","tokenTable","noTokens","impl","input","fragments","ranges","Parse","Parser","type","NodeType","id","typeArray","name","props","languageDataProp","push","docID","indentService","cx","getIndent","streamParser","stateAfter","NodeProp","perNode","TokenTable","defaultTokenTable","tree","syntaxTree","at","resolve","topNode","parent","statePos","findState","from","unit","line","doc","lineAt","Math","min","to","stream","text","readToken","exec","Language","lang","off","startPos","before","children","child","positions","Tree","cutTree","inside","inner","concat","stoppedAt","chunks","chunkPos","chunk","chunkReused","rangeIndex","context","ParseContext","editorState","f","openStart","openEnd","offset","getIndentUnit","findStartInFragments","parsedPos","chunkStart","viewport","skipUntilInView","parseEnd","parseLine","finishChunk","finish","lineChunks","eol","lineAfter","rangeEnd","rangeStart","after","side","offPos","size","skipGapsTo","len0","nextLine","emitToken","buffer","nodeSet","topID","maxBufferLength","reused","balance","result","Error","Object","create","NodeSet","warned","defaultTable","legacyName","createTokenType","extra","table","assign","tag","warnForPart","part","msg","console","warn","tagStr","split","value","tags","replace","styleTags"],"sourceRoot":""}